
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000fb4  08000fb4  00010fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000034  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000044  20000044  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006021  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000dcc  00000000  00000000  00026061  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000770  00000000  00000000  00026e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006e8  00000000  00000000  000275a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000023e9  00000000  00000000  00027c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002700  00000000  00000000  0002a071  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c771  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000020bc  00000000  00000000  0002c7f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002e8ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f74 	.word	0x08000f74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000f74 	.word	0x08000f74

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	2301      	movs	r3, #1
 8000278:	408b      	lsls	r3, r1
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	7992      	ldrb	r2, [r2, #6]
 800028a:	4611      	mov	r1, r2
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	b292      	uxth	r2, r2
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	b292      	uxth	r2, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	887b      	ldrh	r3, [r7, #2]
 80002f6:	405a      	eors	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	615a      	str	r2, [r3, #20]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	807b      	strh	r3, [r7, #2]
 8000314:	4613      	mov	r3, r2
 8000316:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000320:	787a      	ldrb	r2, [r7, #1]
 8000322:	887b      	ldrh	r3, [r7, #2]
 8000324:	f003 0307 	and.w	r3, r3, #7
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000330:	887b      	ldrh	r3, [r7, #2]
 8000332:	08db      	lsrs	r3, r3, #3
 8000334:	b29b      	uxth	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	887b      	ldrh	r3, [r7, #2]
 800033a:	08db      	lsrs	r3, r3, #3
 800033c:	b29b      	uxth	r3, r3
 800033e:	461a      	mov	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3208      	adds	r2, #8
 8000344:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000348:	887b      	ldrh	r3, [r7, #2]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	ea02 0103 	and.w	r1, r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f100 0208 	add.w	r2, r0, #8
 8000362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000366:	887b      	ldrh	r3, [r7, #2]
 8000368:	08db      	lsrs	r3, r3, #3
 800036a:	b29b      	uxth	r3, r3
 800036c:	461a      	mov	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3208      	adds	r2, #8
 8000372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	4313      	orrs	r3, r2
 800037a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800037c:	887b      	ldrh	r3, [r7, #2]
 800037e:	08db      	lsrs	r3, r3, #3
 8000380:	b29b      	uxth	r3, r3
 8000382:	461a      	mov	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3208      	adds	r2, #8
 8000388:	68b9      	ldr	r1, [r7, #8]
 800038a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800039c:	b480      	push	{r7}
 800039e:	b089      	sub	sp, #36	; 0x24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
 80003b0:	2302      	movs	r3, #2
 80003b2:	613b      	str	r3, [r7, #16]
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	2302      	movs	r3, #2
 80003ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003bc:	4b47      	ldr	r3, [pc, #284]	; (80004dc <RCC_GetClocksFreq+0x140>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	f003 030c 	and.w	r3, r3, #12
 80003c4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80003c6:	69bb      	ldr	r3, [r7, #24]
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	d007      	beq.n	80003dc <RCC_GetClocksFreq+0x40>
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	d009      	beq.n	80003e4 <RCC_GetClocksFreq+0x48>
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d13d      	bne.n	8000450 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a42      	ldr	r2, [pc, #264]	; (80004e0 <RCC_GetClocksFreq+0x144>)
 80003d8:	601a      	str	r2, [r3, #0]
      break;
 80003da:	e03d      	b.n	8000458 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a41      	ldr	r2, [pc, #260]	; (80004e4 <RCC_GetClocksFreq+0x148>)
 80003e0:	601a      	str	r2, [r3, #0]
      break;
 80003e2:	e039      	b.n	8000458 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003e4:	4b3d      	ldr	r3, [pc, #244]	; (80004dc <RCC_GetClocksFreq+0x140>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	0d9b      	lsrs	r3, r3, #22
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003f0:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <RCC_GetClocksFreq+0x140>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003f8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d00c      	beq.n	800041a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000400:	4a38      	ldr	r2, [pc, #224]	; (80004e4 <RCC_GetClocksFreq+0x148>)
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	fbb2 f3f3 	udiv	r3, r2, r3
 8000408:	4a34      	ldr	r2, [pc, #208]	; (80004dc <RCC_GetClocksFreq+0x140>)
 800040a:	6852      	ldr	r2, [r2, #4]
 800040c:	0992      	lsrs	r2, r2, #6
 800040e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000412:	fb02 f303 	mul.w	r3, r2, r3
 8000416:	61fb      	str	r3, [r7, #28]
 8000418:	e00b      	b.n	8000432 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800041a:	4a31      	ldr	r2, [pc, #196]	; (80004e0 <RCC_GetClocksFreq+0x144>)
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000422:	4a2e      	ldr	r2, [pc, #184]	; (80004dc <RCC_GetClocksFreq+0x140>)
 8000424:	6852      	ldr	r2, [r2, #4]
 8000426:	0992      	lsrs	r2, r2, #6
 8000428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800042c:	fb02 f303 	mul.w	r3, r2, r3
 8000430:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000432:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <RCC_GetClocksFreq+0x140>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	0c1b      	lsrs	r3, r3, #16
 8000438:	f003 0303 	and.w	r3, r3, #3
 800043c:	3301      	adds	r3, #1
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000442:	69fa      	ldr	r2, [r7, #28]
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	fbb2 f2f3 	udiv	r2, r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]
      break;
 800044e:	e003      	b.n	8000458 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <RCC_GetClocksFreq+0x144>)
 8000454:	601a      	str	r2, [r3, #0]
      break;
 8000456:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000458:	4b20      	ldr	r3, [pc, #128]	; (80004dc <RCC_GetClocksFreq+0x140>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000460:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000468:	4a1f      	ldr	r2, [pc, #124]	; (80004e8 <RCC_GetClocksFreq+0x14c>)
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	4413      	add	r3, r2
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	40da      	lsrs	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <RCC_GetClocksFreq+0x140>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000488:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800048a:	69bb      	ldr	r3, [r7, #24]
 800048c:	0a9b      	lsrs	r3, r3, #10
 800048e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000490:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <RCC_GetClocksFreq+0x14c>)
 8000492:	69bb      	ldr	r3, [r7, #24]
 8000494:	4413      	add	r3, r2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	685a      	ldr	r2, [r3, #4]
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	40da      	lsrs	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <RCC_GetClocksFreq+0x140>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80004b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	0b5b      	lsrs	r3, r3, #13
 80004b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80004b8:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <RCC_GetClocksFreq+0x14c>)
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	685a      	ldr	r2, [r3, #4]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	40da      	lsrs	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60da      	str	r2, [r3, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3724      	adds	r7, #36	; 0x24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40023800 	.word	0x40023800
 80004e0:	00f42400 	.word	0x00f42400
 80004e4:	007a1200 	.word	0x007a1200
 80004e8:	20000000 	.word	0x20000000

080004ec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d006      	beq.n	800050c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80004fe:	490a      	ldr	r1, [pc, #40]	; (8000528 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800050a:	e006      	b.n	800051a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800050c:	4906      	ldr	r1, [pc, #24]	; (8000528 <RCC_AHB1PeriphClockCmd+0x3c>)
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	43db      	mvns	r3, r3
 8000516:	4013      	ands	r3, r2
 8000518:	630b      	str	r3, [r1, #48]	; 0x30
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800

0800052c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d006      	beq.n	800054c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800053e:	490a      	ldr	r1, [pc, #40]	; (8000568 <RCC_APB1PeriphClockCmd+0x3c>)
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <RCC_APB1PeriphClockCmd+0x3c>)
 8000542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800054a:	e006      	b.n	800055a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800054c:	4906      	ldr	r1, [pc, #24]	; (8000568 <RCC_APB1PeriphClockCmd+0x3c>)
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <RCC_APB1PeriphClockCmd+0x3c>)
 8000550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	43db      	mvns	r3, r3
 8000556:	4013      	ands	r3, r2
 8000558:	640b      	str	r3, [r1, #64]	; 0x40
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d006      	beq.n	800058c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800057e:	490a      	ldr	r1, [pc, #40]	; (80005a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4313      	orrs	r3, r2
 8000588:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800058a:	e006      	b.n	800059a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800058c:	4906      	ldr	r1, [pc, #24]	; (80005a8 <RCC_APB2PeriphClockCmd+0x3c>)
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	43db      	mvns	r3, r3
 8000596:	4013      	ands	r3, r2
 8000598:	644b      	str	r3, [r1, #68]	; 0x44
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800

080005ac <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a29      	ldr	r2, [pc, #164]	; (8000668 <TIM_TimeBaseInit+0xbc>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d013      	beq.n	80005f0 <TIM_TimeBaseInit+0x44>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a28      	ldr	r2, [pc, #160]	; (800066c <TIM_TimeBaseInit+0xc0>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d00f      	beq.n	80005f0 <TIM_TimeBaseInit+0x44>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005d6:	d00b      	beq.n	80005f0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a25      	ldr	r2, [pc, #148]	; (8000670 <TIM_TimeBaseInit+0xc4>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d007      	beq.n	80005f0 <TIM_TimeBaseInit+0x44>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a24      	ldr	r2, [pc, #144]	; (8000674 <TIM_TimeBaseInit+0xc8>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d003      	beq.n	80005f0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <TIM_TimeBaseInit+0xcc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d108      	bne.n	8000602 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005f6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	885a      	ldrh	r2, [r3, #2]
 80005fc:	89fb      	ldrh	r3, [r7, #14]
 80005fe:	4313      	orrs	r3, r2
 8000600:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <TIM_TimeBaseInit+0xd0>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d00c      	beq.n	8000624 <TIM_TimeBaseInit+0x78>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <TIM_TimeBaseInit+0xd4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d008      	beq.n	8000624 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000612:	89fb      	ldrh	r3, [r7, #14]
 8000614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000618:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	891a      	ldrh	r2, [r3, #8]
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	4313      	orrs	r3, r2
 8000622:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	89fa      	ldrh	r2, [r7, #14]
 8000628:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	881a      	ldrh	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <TIM_TimeBaseInit+0xbc>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d003      	beq.n	800064a <TIM_TimeBaseInit+0x9e>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <TIM_TimeBaseInit+0xc0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d104      	bne.n	8000654 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	7a9b      	ldrb	r3, [r3, #10]
 800064e:	b29a      	uxth	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	829a      	strh	r2, [r3, #20]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40010000 	.word	0x40010000
 800066c:	40010400 	.word	0x40010400
 8000670:	40000400 	.word	0x40000400
 8000674:	40000800 	.word	0x40000800
 8000678:	40000c00 	.word	0x40000c00
 800067c:	40001000 	.word	0x40001000
 8000680:	40001400 	.word	0x40001400

08000684 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	b29b      	uxth	r3, r3
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80006a6:	e007      	b.n	80006b8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	f023 0301 	bic.w	r3, r3, #1
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	801a      	strh	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
 80006d0:	4613      	mov	r3, r2
 80006d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006d4:	787b      	ldrb	r3, [r7, #1]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d008      	beq.n	80006ec <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	899b      	ldrh	r3, [r3, #12]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80006ea:	e009      	b.n	8000700 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	899b      	ldrh	r3, [r3, #12]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	887b      	ldrh	r3, [r7, #2]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4013      	ands	r3, r2
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	819a      	strh	r2, [r3, #12]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	43db      	mvns	r3, r3
 800071c:	b29a      	uxth	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	821a      	strh	r2, [r3, #16]
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	8a1b      	ldrh	r3, [r3, #16]
 800074e:	b29b      	uxth	r3, r3
 8000750:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000758:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	88db      	ldrh	r3, [r3, #6]
 800075e:	461a      	mov	r2, r3
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	4313      	orrs	r3, r2
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	b29a      	uxth	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b29b      	uxth	r3, r3
 8000774:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800077c:	f023 030c 	bic.w	r3, r3, #12
 8000780:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	889a      	ldrh	r2, [r3, #4]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	891b      	ldrh	r3, [r3, #8]
 800078a:	4313      	orrs	r3, r2
 800078c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000792:	4313      	orrs	r3, r2
 8000794:	b29b      	uxth	r3, r3
 8000796:	461a      	mov	r2, r3
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	4313      	orrs	r3, r2
 800079c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	8a9b      	ldrh	r3, [r3, #20]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	899b      	ldrh	r3, [r3, #12]
 80007ba:	461a      	mov	r2, r3
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	4313      	orrs	r3, r2
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fde4 	bl	800039c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a30      	ldr	r2, [pc, #192]	; (8000898 <USART_Init+0x168>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d003      	beq.n	80007e4 <USART_Init+0xb4>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a2f      	ldr	r2, [pc, #188]	; (800089c <USART_Init+0x16c>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d102      	bne.n	80007ea <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	623b      	str	r3, [r7, #32]
 80007e8:	e001      	b.n	80007ee <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	899b      	ldrh	r3, [r3, #12]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da0c      	bge.n	8000814 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80007fa:	6a3a      	ldr	r2, [r7, #32]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	009a      	lsls	r2, r3, #2
 8000804:	441a      	add	r2, r3
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	e00b      	b.n	800082c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000814:	6a3a      	ldr	r2, [r7, #32]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	009a      	lsls	r2, r3, #2
 800081e:	441a      	add	r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <USART_Init+0x170>)
 8000830:	fba2 2303 	umull	r2, r3, r2, r3
 8000834:	095b      	lsrs	r3, r3, #5
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	091b      	lsrs	r3, r3, #4
 800083e:	2264      	movs	r2, #100	; 0x64
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	899b      	ldrh	r3, [r3, #12]
 800084e:	b29b      	uxth	r3, r3
 8000850:	b21b      	sxth	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	da0c      	bge.n	8000870 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	3332      	adds	r3, #50	; 0x32
 800085c:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <USART_Init+0x170>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800086a:	4313      	orrs	r3, r2
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
 800086e:	e00b      	b.n	8000888 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	3332      	adds	r3, #50	; 0x32
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <USART_Init+0x170>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	095b      	lsrs	r3, r3, #5
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000884:	4313      	orrs	r3, r2
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	b29a      	uxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	811a      	strh	r2, [r3, #8]
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40011000 	.word	0x40011000
 800089c:	40011400 	.word	0x40011400
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d008      	beq.n	80008c8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	899b      	ldrh	r3, [r3, #12]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008c6:	e007      	b.n	80008d8 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	899b      	ldrh	r3, [r3, #12]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	819a      	strh	r2, [r3, #12]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	809a      	strh	r2, [r3, #4]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000912:	4909      	ldr	r1, [pc, #36]	; (8000938 <NVIC_EnableIRQ+0x30>)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	095b      	lsrs	r3, r3, #5
 800091a:	79fa      	ldrb	r2, [r7, #7]
 800091c:	f002 021f 	and.w	r2, r2, #31
 8000920:	2001      	movs	r0, #1
 8000922:	fa00 f202 	lsl.w	r2, r0, r2
 8000926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100

0800093c <main>:
volatile uint32_t count = 0;
char couChar[20];

// -------------- main program -------------------
int main(void)
{
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
	SystemInit(); // Initializing System
 8000942:	f000 f94b 	bl	8000bdc <SystemInit>

	initLED(); // initializing LED
 8000946:	f000 f8d3 	bl	8000af0 <initLED>
	initTIM10(); // initializing TIM10
 800094a:	f000 f8a7 	bl	8000a9c <initTIM10>
	initPinsUSART(); // initializing Pins for USART
 800094e:	f000 f883 	bl	8000a58 <initPinsUSART>
	initUSART(); // initializing USART
 8000952:	f000 f85d 	bl	8000a10 <initUSART>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8000956:	b662      	cpsie	i

	__enable_irq(); // enabling interrupts to be sure

	// sending data through USART at the beginning of Programm
	char stri[] = "Programm started!!!\n\r";
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <main+0x3c>)
 800095a:	463c      	mov	r4, r7
 800095c:	461d      	mov	r5, r3
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000966:	6020      	str	r0, [r4, #0]
 8000968:	3404      	adds	r4, #4
 800096a:	8021      	strh	r1, [r4, #0]
	sendUSART(stri);
 800096c:	463b      	mov	r3, r7
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f82a 	bl	80009c8 <sendUSART>

	/* Infinite loop */
	while (1)
	{
		__WFI; // wait for Interrupt
 8000974:	e7fe      	b.n	8000974 <main+0x38>
 8000976:	bf00      	nop
 8000978:	08000f8c 	.word	0x08000f8c

0800097c <TIM1_UP_TIM10_IRQHandler>:
	}
}

// TIM10 Handler
void TIM1_UP_TIM10_IRQHandler(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	count++; // increasing counter every second
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8000988:	6013      	str	r3, [r2, #0]
	sprintf(couChar, "Timer: %d\n\r", count); // changing interger to char
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <TIM1_UP_TIM10_IRQHandler+0x38>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	4909      	ldr	r1, [pc, #36]	; (80009b8 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000994:	f000 fab4 	bl	8000f00 <siprintf>
	sendUSART(couChar); // sending data through USART every second
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <TIM1_UP_TIM10_IRQHandler+0x40>)
 800099a:	f000 f815 	bl	80009c8 <sendUSART>

	// LED blinking every second
	GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 800099e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <TIM1_UP_TIM10_IRQHandler+0x44>)
 80009a4:	f7ff fc9e 	bl	80002e4 <GPIO_ToggleBits>

	// clearing TIM10 interrupt pending bits
	TIM_ClearITPendingBit(TIM10, TIM_IT_Update);
 80009a8:	2101      	movs	r1, #1
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <TIM1_UP_TIM10_IRQHandler+0x48>)
 80009ac:	f7ff feae 	bl	800070c <TIM_ClearITPendingBit>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000002c 	.word	0x2000002c
 80009b8:	08000fa4 	.word	0x08000fa4
 80009bc:	20000030 	.word	0x20000030
 80009c0:	40020c00 	.word	0x40020c00
 80009c4:	40014400 	.word	0x40014400

080009c8 <sendUSART>:

// Function for sending data through USART
void sendUSART(char* charVal){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	while(*charVal != 0x00){ // sending data till there's nothing at end
 80009d0:	e014      	b.n	80009fc <sendUSART+0x34>
		USART_SendData(USART2, *charVal);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <sendUSART+0x44>)
 80009dc:	f7ff ff82 	bl	80008e4 <USART_SendData>
		for(int i=0; i<2500;i++); // waiting few milliseconds before sending next value
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e002      	b.n	80009ec <sendUSART+0x24>
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80009f2:	4293      	cmp	r3, r2
 80009f4:	ddf7      	ble.n	80009e6 <sendUSART+0x1e>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TC)==RESET);
		charVal++;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3301      	adds	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
	while(*charVal != 0x00){ // sending data till there's nothing at end
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1e6      	bne.n	80009d2 <sendUSART+0xa>
	}
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40004400 	.word	0x40004400

08000a10 <initUSART>:

// initializing USART2
void initUSART(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
	// Enabling clock for USART
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000a16:	2101      	movs	r1, #1
 8000a18:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a1c:	f7ff fd86 	bl	800052c <RCC_APB1PeriphClockCmd>
	// defining USART structure
	USART_InitTypeDef us;
	us.USART_BaudRate = 9600;
 8000a20:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a24:	603b      	str	r3, [r7, #0]
	us.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000a26:	230c      	movs	r3, #12
 8000a28:	817b      	strh	r3, [r7, #10]
	us.USART_Parity = USART_Parity_No;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	813b      	strh	r3, [r7, #8]
	us.USART_WordLength = USART_WordLength_8b;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	80bb      	strh	r3, [r7, #4]
	us.USART_StopBits = USART_StopBits_1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	80fb      	strh	r3, [r7, #6]
	us.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000a36:	2300      	movs	r3, #0
 8000a38:	81bb      	strh	r3, [r7, #12]
	USART_Init(USART2, &us); // initializing USART2
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <initUSART+0x44>)
 8000a40:	f7ff fe76 	bl	8000730 <USART_Init>
	USART_Cmd(USART2, ENABLE); // enabling USART2
 8000a44:	2101      	movs	r1, #1
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <initUSART+0x44>)
 8000a48:	f7ff ff2c 	bl	80008a4 <USART_Cmd>
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40004400 	.word	0x40004400

08000a58 <initPinsUSART>:

// Initializing Pins for USART
void initPinsUSART(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	// Initializing clock for USART Pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2008      	movs	r0, #8
 8000a62:	f7ff fd43 	bl	80004ec <RCC_AHB1PeriphClockCmd>
	// defining Pins structure for USART
	GPIO_InitTypeDef usPin;
	usPin.GPIO_Mode = GPIO_Mode_AF;   // actiting alternate function mode
 8000a66:	2302      	movs	r3, #2
 8000a68:	713b      	strb	r3, [r7, #4]
	usPin.GPIO_OType = GPIO_OType_PP;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71bb      	strb	r3, [r7, #6]
	usPin.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	603b      	str	r3, [r7, #0]
	usPin.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]
	usPin.GPIO_Speed = GPIO_Speed_50MHz;
 8000a76:	2302      	movs	r3, #2
 8000a78:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD, &usPin); // initializing Pins
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <initPinsUSART+0x40>)
 8000a80:	f7ff fba2 	bl	80001c8 <GPIO_Init>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource5 | GPIO_PinSource5 , GPIO_AF_USART2);
 8000a84:	2207      	movs	r2, #7
 8000a86:	2105      	movs	r1, #5
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <initPinsUSART+0x40>)
 8000a8a:	f7ff fc3d 	bl	8000308 <GPIO_PinAFConfig>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40020c00 	.word	0x40020c00

08000a9c <initTIM10>:

// Initializing Timer
void initTIM10(void){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
	// Enabling Clock for Timer
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000aa8:	f7ff fd60 	bl	800056c <RCC_APB2PeriphClockCmd>
	// defining TIM10 structure
	TIM_TimeBaseInitTypeDef tim;
	tim.TIM_ClockDivision = TIM_CKD_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	81bb      	strh	r3, [r7, #12]
	tim.TIM_CounterMode = TIM_CounterMode_Up;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	80fb      	strh	r3, [r7, #6]
	tim.TIM_Period = 999; // -> 1/s
 8000ab4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000ab8:	60bb      	str	r3, [r7, #8]
	tim.TIM_Prescaler = 23999; // 80000 -> 1000/s
 8000aba:	f645 53bf 	movw	r3, #23999	; 0x5dbf
 8000abe:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseInit(TIM10, &tim);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <initTIM10+0x50>)
 8000ac6:	f7ff fd71 	bl	80005ac <TIM_TimeBaseInit>
	TIM_ITConfig(TIM10, TIM_IT_Update, ENABLE);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2101      	movs	r1, #1
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <initTIM10+0x50>)
 8000ad0:	f7ff fdf8 	bl	80006c4 <TIM_ITConfig>
	TIM_Cmd(TIM10, ENABLE); // enabling TIM10
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <initTIM10+0x50>)
 8000ad8:	f7ff fdd4 	bl	8000684 <TIM_Cmd>
	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000adc:	2019      	movs	r0, #25
 8000ade:	f7ff ff13 	bl	8000908 <NVIC_EnableIRQ>
}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40014400 	.word	0x40014400

08000af0 <initLED>:

// Initializing LED
void initLED(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	// Enabling Clock for Pins for LEDs
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000af6:	2101      	movs	r1, #1
 8000af8:	2008      	movs	r0, #8
 8000afa:	f7ff fcf7 	bl	80004ec <RCC_AHB1PeriphClockCmd>
	// defining Pin for LED structure
	GPIO_InitTypeDef led;
	led.GPIO_Mode = GPIO_Mode_OUT;
 8000afe:	2301      	movs	r3, #1
 8000b00:	713b      	strb	r3, [r7, #4]
	led.GPIO_OType = GPIO_OType_PP;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71bb      	strb	r3, [r7, #6]
	led.GPIO_Pin = GPIO_Pin_12;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	603b      	str	r3, [r7, #0]
	led.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
	led.GPIO_Speed = GPIO_Speed_50MHz;
 8000b10:	2302      	movs	r3, #2
 8000b12:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD, &led); // initializing Pin for LED
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <initLED+0x38>)
 8000b1a:	f7ff fb55 	bl	80001c8 <GPIO_Init>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b32:	e003      	b.n	8000b3c <LoopCopyDataInit>

08000b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b3a:	3104      	adds	r1, #4

08000b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b44:	d3f6      	bcc.n	8000b34 <CopyDataInit>
  ldr  r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b48:	e002      	b.n	8000b50 <LoopFillZerobss>

08000b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b4c:	f842 3b04 	str.w	r3, [r2], #4

08000b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b54:	d3f9      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b56:	f000 f841 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f000 f9e7 	bl	8000f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff feed 	bl	800093c <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b68:	08000fb8 	.word	0x08000fb8
  ldr  r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b70:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b74:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b78:	20000044 	.word	0x20000044

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>

08000b7e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <HardFault_Handler+0x4>

08000b92 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <BusFault_Handler+0x4>

08000b9e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <UsageFault_Handler+0x4>

08000ba4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <SystemInit+0x60>)
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <SystemInit+0x60>)
 8000be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <SystemInit+0x64>)
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <SystemInit+0x64>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <SystemInit+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <SystemInit+0x64>)
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <SystemInit+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <SystemInit+0x64>)
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <SystemInit+0x68>)
 8000c16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <SystemInit+0x64>)
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <SystemInit+0x64>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000c2a:	f000 f80d 	bl	8000c48 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c2e:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <SystemInit+0x60>)
 8000c30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c34:	609a      	str	r2, [r3, #8]
#endif
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	24003010 	.word	0x24003010

08000c48 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000c56:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <SetSysClock+0xe8>)
 8000c58:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <SetSysClock+0xe8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c60:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <SetSysClock+0xe8>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d103      	bne.n	8000c80 <SetSysClock+0x38>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c7e:	d1f0      	bne.n	8000c62 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <SetSysClock+0xe8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	e001      	b.n	8000c96 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d142      	bne.n	8000d22 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 2 mode, System frequency up to 144 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c9c:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <SetSysClock+0xe8>)
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <SetSysClock+0xe8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR &= (uint32_t)~(PWR_CR_VOS);
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <SetSysClock+0xec>)
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <SetSysClock+0xec>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cb2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 2*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV2;
 8000cb4:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <SetSysClock+0xe8>)
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <SetSysClock+0xe8>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbe:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <SetSysClock+0xe8>)
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <SetSysClock+0xe8>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <SetSysClock+0xe8>)
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <SetSysClock+0xe8>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <SetSysClock+0xe8>)
 8000cd6:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <SetSysClock+0xf0>)
 8000cd8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <SetSysClock+0xe8>)
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <SetSysClock+0xe8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ce4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ce6:	bf00      	nop
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <SetSysClock+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f9      	beq.n	8000ce8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_0WS;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <SetSysClock+0xf4>)
 8000cf6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000cfa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <SetSysClock+0xe8>)
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <SetSysClock+0xe8>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f023 0303 	bic.w	r3, r3, #3
 8000d06:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000d08:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <SetSysClock+0xe8>)
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <SetSysClock+0xe8>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000d14:	bf00      	nop
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SetSysClock+0xe8>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d1f9      	bne.n	8000d16 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000
 8000d38:	08433004 	.word	0x08433004
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000d50:	e004      	b.n	8000d5c <ts_itoa+0x1c>
		div *= base;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	fb02 f303 	mul.w	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d2f3      	bcs.n	8000d52 <ts_itoa+0x12>

	while (div != 0)
 8000d6a:	e029      	b.n	8000dc0 <ts_itoa+0x80>
	{
		int num = d/div;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d74:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d7e:	fb02 f201 	mul.w	r2, r2, r1
 8000d82:	1a9b      	subs	r3, r3, r2
 8000d84:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	dd0a      	ble.n	8000dac <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1c59      	adds	r1, r3, #1
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	6011      	str	r1, [r2, #0]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	3237      	adds	r2, #55	; 0x37
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e009      	b.n	8000dc0 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1c59      	adds	r1, r3, #1
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	6011      	str	r1, [r2, #0]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	3230      	adds	r2, #48	; 0x30
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1d2      	bne.n	8000d6c <ts_itoa+0x2c>
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	371c      	adds	r7, #28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b088      	sub	sp, #32
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000de2:	e07d      	b.n	8000ee0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b25      	cmp	r3, #37	; 0x25
 8000dea:	d171      	bne.n	8000ed0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b64      	cmp	r3, #100	; 0x64
 8000df8:	d01e      	beq.n	8000e38 <ts_formatstring+0x66>
 8000dfa:	2b64      	cmp	r3, #100	; 0x64
 8000dfc:	dc06      	bgt.n	8000e0c <ts_formatstring+0x3a>
 8000dfe:	2b58      	cmp	r3, #88	; 0x58
 8000e00:	d050      	beq.n	8000ea4 <ts_formatstring+0xd2>
 8000e02:	2b63      	cmp	r3, #99	; 0x63
 8000e04:	d00e      	beq.n	8000e24 <ts_formatstring+0x52>
 8000e06:	2b25      	cmp	r3, #37	; 0x25
 8000e08:	d058      	beq.n	8000ebc <ts_formatstring+0xea>
 8000e0a:	e05d      	b.n	8000ec8 <ts_formatstring+0xf6>
 8000e0c:	2b73      	cmp	r3, #115	; 0x73
 8000e0e:	d02b      	beq.n	8000e68 <ts_formatstring+0x96>
 8000e10:	2b73      	cmp	r3, #115	; 0x73
 8000e12:	dc02      	bgt.n	8000e1a <ts_formatstring+0x48>
 8000e14:	2b69      	cmp	r3, #105	; 0x69
 8000e16:	d00f      	beq.n	8000e38 <ts_formatstring+0x66>
 8000e18:	e056      	b.n	8000ec8 <ts_formatstring+0xf6>
 8000e1a:	2b75      	cmp	r3, #117	; 0x75
 8000e1c:	d037      	beq.n	8000e8e <ts_formatstring+0xbc>
 8000e1e:	2b78      	cmp	r3, #120	; 0x78
 8000e20:	d040      	beq.n	8000ea4 <ts_formatstring+0xd2>
 8000e22:	e051      	b.n	8000ec8 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60fa      	str	r2, [r7, #12]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	1d11      	adds	r1, r2, #4
 8000e2e:	6079      	str	r1, [r7, #4]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]
				break;
 8000e36:	e047      	b.n	8000ec8 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1d1a      	adds	r2, r3, #4
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	da07      	bge.n	8000e58 <ts_formatstring+0x86>
					{
						val *= -1;
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	425b      	negs	r3, r3
 8000e4c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	60fa      	str	r2, [r7, #12]
 8000e54:	222d      	movs	r2, #45	; 0x2d
 8000e56:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000e58:	69f9      	ldr	r1, [r7, #28]
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	220a      	movs	r2, #10
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff6d 	bl	8000d40 <ts_itoa>
				}
				break;
 8000e66:	e02f      	b.n	8000ec8 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1d1a      	adds	r2, r3, #4
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000e72:	e007      	b.n	8000e84 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60fa      	str	r2, [r7, #12]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	1c51      	adds	r1, r2, #1
 8000e7e:	61b9      	str	r1, [r7, #24]
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f3      	bne.n	8000e74 <ts_formatstring+0xa2>
					}
				}
				break;
 8000e8c:	e01c      	b.n	8000ec8 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	1d1a      	adds	r2, r3, #4
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	220a      	movs	r2, #10
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff4f 	bl	8000d40 <ts_itoa>
				break;
 8000ea2:	e011      	b.n	8000ec8 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	1d1a      	adds	r2, r3, #4
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff43 	bl	8000d40 <ts_itoa>
				break;
 8000eba:	e005      	b.n	8000ec8 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60fa      	str	r2, [r7, #12]
 8000ec2:	2225      	movs	r2, #37	; 0x25
 8000ec4:	701a      	strb	r2, [r3, #0]
				  break;
 8000ec6:	bf00      	nop
			}
			fmt++;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	e007      	b.n	8000ee0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60fa      	str	r2, [r7, #12]
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	1c51      	adds	r1, r2, #1
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	7812      	ldrb	r2, [r2, #0]
 8000ede:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f47f af7d 	bne.w	8000de4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	1ad3      	subs	r3, r2, r3
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8000f00:	b40e      	push	{r1, r2, r3}
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b085      	sub	sp, #20
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	69f9      	ldr	r1, [r7, #28]
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff5c 	bl	8000dd2 <ts_formatstring>
 8000f1a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f28:	b003      	add	sp, #12
 8000f2a:	4770      	bx	lr

08000f2c <__libc_init_array>:
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4e0d      	ldr	r6, [pc, #52]	; (8000f64 <__libc_init_array+0x38>)
 8000f30:	4c0d      	ldr	r4, [pc, #52]	; (8000f68 <__libc_init_array+0x3c>)
 8000f32:	1ba4      	subs	r4, r4, r6
 8000f34:	10a4      	asrs	r4, r4, #2
 8000f36:	2500      	movs	r5, #0
 8000f38:	42a5      	cmp	r5, r4
 8000f3a:	d109      	bne.n	8000f50 <__libc_init_array+0x24>
 8000f3c:	4e0b      	ldr	r6, [pc, #44]	; (8000f6c <__libc_init_array+0x40>)
 8000f3e:	4c0c      	ldr	r4, [pc, #48]	; (8000f70 <__libc_init_array+0x44>)
 8000f40:	f000 f818 	bl	8000f74 <_init>
 8000f44:	1ba4      	subs	r4, r4, r6
 8000f46:	10a4      	asrs	r4, r4, #2
 8000f48:	2500      	movs	r5, #0
 8000f4a:	42a5      	cmp	r5, r4
 8000f4c:	d105      	bne.n	8000f5a <__libc_init_array+0x2e>
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f54:	4798      	blx	r3
 8000f56:	3501      	adds	r5, #1
 8000f58:	e7ee      	b.n	8000f38 <__libc_init_array+0xc>
 8000f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f5e:	4798      	blx	r3
 8000f60:	3501      	adds	r5, #1
 8000f62:	e7f2      	b.n	8000f4a <__libc_init_array+0x1e>
 8000f64:	08000fb0 	.word	0x08000fb0
 8000f68:	08000fb0 	.word	0x08000fb0
 8000f6c:	08000fb0 	.word	0x08000fb0
 8000f70:	08000fb4 	.word	0x08000fb4

08000f74 <_init>:
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f76:	bf00      	nop
 8000f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7a:	bc08      	pop	{r3}
 8000f7c:	469e      	mov	lr, r3
 8000f7e:	4770      	bx	lr

08000f80 <_fini>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	bf00      	nop
 8000f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f86:	bc08      	pop	{r3}
 8000f88:	469e      	mov	lr, r3
 8000f8a:	4770      	bx	lr
